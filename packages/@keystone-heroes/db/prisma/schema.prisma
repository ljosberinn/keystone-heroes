generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Class {
  id   Int           @id
  name PlayableClass @unique

  Character Character[]
  Spec      Spec[]
  Talent    Talent[]
}

model Spec {
  id      Int      @id
  name    SpecName
  classID Int
  role    Role
  class   Class    @relation(fields: [classID], references: [id])

  Player Player[]
  Talent Talent[]

  @@unique([name, classID])
}

model Dungeon {
  id   Int    @id
  name String
  slug String
  time Int

  Fight Fight[]
  Zone  Zone[]
}

model Zone {
  id    Int    @id
  name  String
  order Int

  dungeonID Int
  dungeon   Dungeon @relation(fields: [dungeonID], references: [id])

  minX Int
  maxX Int
  minY Int
  maxY Int

  PullZone PullZone[]
}

model Affix {
  id       Int     @id
  name     Affixes
  icon     String
  seasonal Boolean

  Seasons Season[]
  affix1  Week[]   @relation("affix1")
  affix2  Week[]   @relation("affix2")
  affix3  Week[]   @relation("affix3")
}

model Expansion {
  id     Int      @id @default(autoincrement())
  name   String
  slug   String
  Season Season[]
}

model Season {
  id Int @id @default(autoincrement())

  name        String
  slug        String
  startTime   DateTime
  endTime     DateTime?
  expansionID Int
  affixID     Int

  affix     Affix     @relation(fields: [affixID], references: [id])
  expansion Expansion @relation(fields: [expansionID], references: [id])

  Week Week[]
}

model Week {
  id Int @id @default(autoincrement())

  seasonID     Int
  seasonWeekID Int
  affix1ID     Int
  affix2ID     Int
  affix3ID     Int

  affix1 Affix  @relation("affix1", fields: [affix1ID], references: [id])
  affix2 Affix  @relation("affix2", fields: [affix2ID], references: [id])
  affix3 Affix  @relation("affix3", fields: [affix3ID], references: [id])
  season Season @relation(fields: [seasonID], references: [id])

  Report Report[]
  @@unique([seasonID, seasonWeekID])
}

model Report {
  id Int @id @default(autoincrement())

  report    String   @unique @db.Char(18)
  regionID  Int
  title     String
  startTime DateTime
  endTime   DateTime

  region Region @relation(fields: [regionID], references: [id])

  weekID Int
  week   Week @relation(fields: [weekID], references: [id])

  Fight  Fight[]
  Player Player[]
}

model Fight {
  id Int @id @default(autoincrement())

  fightID          Int
  reportID         Int
  keystoneTime     Int
  keystoneLevel    Int
  chests           Int
  dps              Int
  hps              Int
  dtps             Int
  totalDeaths      Int
  averageItemLevel Float
  startTime        Int
  endTime          Int
  percent          Float
  rating           Int

  dungeonID Int?

  Report  Report   @relation(fields: [reportID], references: [id])
  dungeon Dungeon? @relation(fields: [dungeonID], references: [id])

  PlayerConduit       PlayerConduit[]
  PlayerTalent        PlayerTalent[]
  PlayerCovenantTrait PlayerCovenantTrait[]
  Pull                Pull[]
  PlayerFight         PlayerFight[]

  @@unique([fightID, reportID])
}

model PlayerFight {
  id Int @id @default(autoincrement())

  fightID Int
  fight   Fight @relation(fields: [fightID], references: [id])

  playerID Int
  player   Player @relation(fields: [playerID], references: [id])
}

model Character {
  id Int @id @default(autoincrement())

  name     String
  serverID Int
  classID  Int

  class  Class    @relation(fields: [classID], references: [id])
  server Server   @relation(fields: [serverID], references: [id])
  Player Player[]

  @@unique([name, serverID])
}

model Player {
  id Int @id @default(autoincrement())

  reportID    Int
  characterID Int
  actorID     Int
  specID      Int
  dps         Int
  hps         Int
  deaths      Int
  itemLevel   Int
  covenantID  Int?
  soulbindID  Int?
  legendaryID Int?

  character Character  @relation(fields: [characterID], references: [id])
  covenant  Covenant?  @relation(fields: [covenantID], references: [id])
  legendary Legendary? @relation(fields: [legendaryID], references: [id])
  report    Report     @relation(fields: [reportID], references: [id])
  soulbind  Soulbind?  @relation(fields: [soulbindID], references: [id])
  spec      Spec       @relation(fields: [specID], references: [id])

  sourcePlayer Event[] @relation("sourcePlayer")
  targetPlayer Event[] @relation("targetPlayer")

  PlayerConduit       PlayerConduit[]
  PlayerCovenantTrait PlayerCovenantTrait[]
  PlayerTalent        PlayerTalent[]
  PlayerFight         PlayerFight[]
}

model Covenant {
  id   Int       @id
  name Covenants
  icon String

  CovenantTrait CovenantTrait[]
  Player        Player[]
  Soulbind      Soulbind[]
}

model Soulbind {
  id Int @id

  name       String
  covenantID Int

  covenant Covenant @relation(fields: [covenantID], references: [id])

  Player Player[]
}

model Region {
  id Int @id @default(autoincrement())

  slug String @unique

  Report Report[]
  Server Server[]
}

model Server {
  id Int @id @default(autoincrement())

  name     String
  regionID Int

  region Region @relation(fields: [regionID], references: [id])

  Character Character[]

  @@unique([name, regionID])
}

model Legendary {
  id         Int    @id
  itemID     Int
  effectIcon String
  effectName String

  Player Player[]
}

model Conduit {
  id   Int    @id
  name String
  icon String

  PlayerConduit PlayerConduit[]
}

model PlayerConduit {
  id Int @id @default(autoincrement())

  itemLevel Int
  fightID   Int
  conduitID Int
  playerID  Int

  conduit Conduit @relation(fields: [conduitID], references: [id])
  fight   Fight   @relation(fields: [fightID], references: [id])
  player  Player  @relation(fields: [playerID], references: [id])
}

model Talent {
  id Int @id

  name    String
  icon    String
  classID Int
  specID  Int

  class Class @relation(fields: [classID], references: [id])
  spec  Spec  @relation(fields: [specID], references: [id])

  PlayerTalent PlayerTalent[]
}

model PlayerTalent {
  id Int @id @default(autoincrement())

  fightID  Int
  talentID Int
  playerID Int

  fight  Fight  @relation(fields: [fightID], references: [id])
  player Player @relation(fields: [playerID], references: [id])
  talent Talent @relation(fields: [talentID], references: [id])
}

model CovenantTrait {
  id         Int    @id
  name       String
  icon       String
  covenantID Int

  covenant Covenant @relation(fields: [covenantID], references: [id])

  PlayerCovenantTrait PlayerCovenantTrait[]
}

model PlayerCovenantTrait {
  id Int @id @default(autoincrement())

  fightID         Int
  covenantTraitID Int
  playerID        Int

  covenantTrait CovenantTrait @relation(fields: [covenantTraitID], references: [id])
  fight         Fight         @relation(fields: [fightID], references: [id])
  player        Player        @relation(fields: [playerID], references: [id])
}

model WCLAuth {
  id Int @id @default(autoincrement())

  token     String?
  expiresAt Int?
}

model Pull {
  id Int @id @default(autoincrement())

  fightID   Int
  startTime Int
  endTime   Int
  x         Float
  y         Float
  isWipe    Boolean
  percent   Float

  fight Fight @relation(fields: [fightID], references: [id])

  Event    Event[]
  PullZone PullZone[]
  PullNPC  PullNPC[]

  @@unique([fightID, startTime, endTime])
}

model PullZone {
  id Int @id @default(autoincrement())

  pullID Int
  zoneID Int

  zone Zone @relation(fields: [zoneID], references: [id])
  pull Pull @relation(fields: [pullID], references: [id])
}

model PullNPC {
  id Int @id @default(autoincrement())

  count  Int
  pullID Int
  npcID  Int

  npc  NPC  @relation(fields: [npcID], references: [id])
  pull Pull @relation(fields: [pullID], references: [id])
}

model NPC {
  id   Int    @id
  name String

  sourceNPC Event[] @relation("sourceNPC")
  targetNPC Event[] @relation("targetNPC")

  PullNPC PullNPC[]
}

model Event {
  id Int @id @default(autoincrement())

  eventType EventType
  timestamp Int
  abilityID Int?
  ability   Ability?  @relation("ability", fields: [abilityID], references: [id])

  // interrupted by quaking
  interruptedAbilityID Int?
  interruptedAbility   Ability? @relation("interruptedAbility", fields: [interruptedAbilityID], references: [id])

  // acting player
  sourcePlayerID Int?
  sourcePlayer   Player? @relation("sourcePlayer", fields: [sourcePlayerID], references: [id])

  // targeted player
  targetPlayerID Int?
  targetPlayer   Player? @relation("targetPlayer", fields: [targetPlayerID], references: [id])

  // acting npc
  sourceNPCID       Int?
  sourceNPC         NPC? @relation("sourceNPC", fields: [sourceNPCID], references: [id])
  // in case of deaths to NPCs with multipple instances, e.g. pride
  sourceNPCInstance Int?

  // targeted npc
  targetNPCID       Int?
  targetNPC         NPC? @relation("targetNPC", fields: [targetNPCID], references: [id])
  // to differentiate e.g. pride or pf slime instances
  targetNPCInstance Int?

  damage      Int?
  healingDone Int?
  // only given in case of Event === ApplyDebuffStack
  stacks      Int?

  pullID Int
  pull   Pull @relation(fields: [pullID], references: [id])
}

model Ability {
  id Int @id

  name String
  icon String?

  ability            Event[] @relation("ability")
  interruptedAbility Event[] @relation("interruptedAbility")
}

enum EventType {
  HealingDone
  DamageDone
  DamageTaken
  Cast
  BeginCast
  Death
  ApplyBuff
  ApplyBuffStack
  ApplyDebuff
  ApplyDebuffStack
  RemoveBuff
  Interrupt
}

enum Role {
  dps
  tank
  healer
}

enum PlayableClass {
  DemonHunter
  Mage
  Shaman
  Rogue
  Priest
  Warrior
  Druid
  DeathKnight
  Monk
  Paladin
  Warlock
  Hunter
}

enum SpecName {
  Protection
  Fury
  Arms
  Fire
  Frost
  Arcane
  Assassination
  Subtlety
  Outlaw
  Restoration
  Elemental
  Enhancement
  Shadow
  Holy
  Discipline
  BeastMastery
  Survival
  Marksmanship
  Mistweaver
  Brewmaster
  Windwalker
  Guardian
  Balance
  Feral
  Vengeance
  Havoc
  Retribution
  Destruction
  Demonology
  Affliction
  Blood
  Unholy
}

enum Affixes {
  Skittish
  Volcanic
  Necrotic
  Raging
  Bolstering
  Sanguine
  Tyrannical
  Fortified
  Bursting
  Grievous
  Explosive
  Quaking
  Infested
  Reaping
  Beguiling
  Awakened
  Prideful
  Inspiring
  Spiteful
  Storming
  Tormented
}

enum Covenants {
  Kyrian
  Venthyr
  Necrolord
  NightFae
}
